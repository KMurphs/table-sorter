[{"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx":"1","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts":"2","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx":"3","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx":"4","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts":"5","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts":"6","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx":"7","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx":"8","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts":"9","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts":"10","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts":"11","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts":"12","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts":"13","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts":"14","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts":"15","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx":"16","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx":"17","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\table.tsx":"18","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\iterators.ts":"19","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useEffectWhenInView.ts":"20","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CSSLoaders\\index.tsx":"21","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quartileSort.ts":"22","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useAppURI.ts":"23","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\scrollHelpers.ts":"24","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\generalHelpers.ts":"25"},{"size":500,"mtime":499162500000,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":1491,"mtime":1609585732343,"results":"29","hashOfConfig":"27"},{"size":2095,"mtime":1609588952572,"results":"30","hashOfConfig":"27"},{"size":1253,"mtime":1609065435396,"results":"31","hashOfConfig":"27"},{"size":207,"mtime":1609097595572,"results":"32","hashOfConfig":"27"},{"size":5226,"mtime":1609334924234,"results":"33","hashOfConfig":"27"},{"size":6165,"mtime":1609530867368,"results":"34","hashOfConfig":"27"},{"size":3185,"mtime":1609533271931,"results":"35","hashOfConfig":"27"},{"size":1240,"mtime":1609437513712,"results":"36","hashOfConfig":"27"},{"size":1037,"mtime":1609437635083,"results":"37","hashOfConfig":"27"},{"size":640,"mtime":1609437640957,"results":"38","hashOfConfig":"27"},{"size":2244,"mtime":1609437609057,"results":"39","hashOfConfig":"27"},{"size":649,"mtime":1609437527731,"results":"40","hashOfConfig":"27"},{"size":528,"mtime":1609437506948,"results":"41","hashOfConfig":"27"},{"size":1054,"mtime":1609234484098,"results":"42","hashOfConfig":"27"},{"size":2551,"mtime":1609268782419,"results":"43","hashOfConfig":"27"},{"size":5117,"mtime":1609573707383,"results":"44","hashOfConfig":"27"},{"size":1193,"mtime":1609532330299,"results":"45","hashOfConfig":"27"},{"size":886,"mtime":1609491951404,"results":"46","hashOfConfig":"27"},{"size":412,"mtime":1609440615350,"results":"47","hashOfConfig":"27"},{"size":1606,"mtime":1609571630727,"results":"48","hashOfConfig":"27"},{"size":354,"mtime":1609584558708,"results":"49","hashOfConfig":"27"},{"size":4972,"mtime":1609585830739,"results":"50","hashOfConfig":"27"},{"size":738,"mtime":1609588317361,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"m7l9da",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx",[],["109","110"],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx",["111"],"import React, { CSSProperties, useEffect, useRef, useState } from \"react\";\r\n\r\nimport getSorter, { swap, TSorterNames } from \"../Sorters\";\r\nimport \"./index.css\"\r\n\r\ntype BarProxy = {\r\n  value: number; \r\n  handleNo: number; \r\n  class: string;\r\n}\r\n// type BarProps = {\r\n//   height: number,\r\n//   id: number,\r\n//   position: number\r\n// }\r\ntype Props = {\r\n  nBars?: number\r\n}\r\n\r\nexport default function SortVizualizer({nBars}: Props) {\r\n\r\n  const [currentSortingAlsorithm, _setCurrentSortingAlsorithm] = useState<TSorterNames>(\"merge-sort\");\r\n  const setCurrentSortingAlsorithm = (algName: TSorterNames)=>{\r\n    // On new alg, execute side effect to reset vizualizer\r\n    barEffects.current = [];\r\n    _setCurrentSortingAlsorithm(algName);\r\n  }\r\n\r\n\r\n\r\n  const getRandomHeight = () => 5 + Math.round(Math.random() * 20) * 5;\r\n  // The height and position of the bars being vizualized are contained in bars\r\n  const bars = useRef<BarProxy[]>(Array(nBars).fill(0).map((_, idx)=> ({value: getRandomHeight(), handleNo: idx, class: \"\"})))\r\n\r\n\r\n\r\n\r\n  // Vizualizer Effects\r\n  // Structure that will record all swap movement that happened during the sorting\r\n  // These movement will become the effects seen on the ui\r\n  const barEffects = useRef<{f: Function, timeout: number}[]>([])\r\n  const [counter, setCounter] = useState<number>(0); // Dummy variable used to force rerenders\r\n  const renderBarEffect = ()=>setCounter(c => c + 1);\r\n  useEffect(()=>{\r\n    \r\n    // Effects are empty, we need to start a new sorting cycle\r\n    if(barEffects.current.length === 0) {\r\n      new Promise((resolve) => setTimeout(resolve, 1500)).then(()=>{\r\n\r\n        // Adjust heights for new sorting cycle\r\n        bars.current.forEach(bar=> bar.value = getRandomHeight());\r\n\r\n        // Pause just afer adjusting\r\n        barEffects.current.push({f: ()=>{}, timeout: 1500});\r\n\r\n        // Presort array and record swap movements that need to happen in order to get eventually to a sorted set bars\r\n        getSorter(currentSortingAlsorithm)(\r\n          bars.current.map(curr=>curr.value), \r\n          0, \r\n          bars.current.length - 1, \r\n          [{key: \"value\", inAscending: true}],\r\n          (initial, final, level1, level2, isSwapEffect)=>barEffects.current.push({\r\n            f: ()=>{ \r\n              if(isSwapEffect) swap(bars.current, initial, final); \r\n              if(!isSwapEffect) { bars.current[initial].value = final; } \r\n              // console.log(level1)\r\n              bars.current.forEach(bar => bar.class = \"\");\r\n              level1?.forEach(idx => bars.current[idx].class = \"emphasis-1\");\r\n              level2?.forEach(idx => bars.current[idx].class = \"emphasis-2\");\r\n            }, \r\n            timeout: barEffects.current.length === 0 ? 1500 : 300\r\n          })\r\n        );\r\n\r\n        // Schedule the recorded effects to be run one by one\r\n        renderBarEffect();\r\n      })\r\n\r\n\r\n    }else{\r\n\r\n      // Extract first of our bar effects\r\n      const [first, ...rest] = barEffects.current;\r\n      \r\n      // If it's not undefined, wait for timeout, then run the effect and force and re-render\r\n      first && new Promise((resolve) => setTimeout(resolve, first.timeout)).then(()=>{\r\n        first.f();\r\n        // Decrease the amount of effects that are still to be run for this sorting cycle\r\n        barEffects.current = rest;\r\n        renderBarEffect();\r\n      })\r\n\r\n    }\r\n\r\n    // This effect is run everytime counter is changed\r\n  }, [counter/*, currentSortingAlsorithm*/])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id=\"sort-vizualizer\" style={{\"--count\": bars.current.length * 2} as CSSProperties}>\r\n      {\r\n          bars\r\n          .current\r\n          // Adjust Height and position of bar\r\n          .map((_, idx) => {\r\n            const position = bars.current.findIndex(bar => bar.handleNo === idx); \r\n            const height = bars.current[position].value;\r\n            const className = bars.current[position].class;\r\n            return <div key={idx} style={{height: height + \"%\", left: `calc(${position} * 2 * var(--width))`}} className={className} id={`sort-vizualizer-bar-${idx}`} />\r\n          })\r\n          // Insert a dummy div between each bar, to space them\r\n          .reduce(\r\n            (acc, curr, idx) => [...acc, curr, <div key={bars.current.length + idx}/>], \r\n            [<div/>]\r\n          )\r\n          // Remove the initial value of acc\r\n          .slice(1)\r\n      }\r\n\r\n\r\n\r\n      <div className=\"sort-vizualizer__settings\">\r\n        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\r\n        <select id=\"sort-vizualizer__algorithm\" name=\"sort-vizualizer__algorithm\" value={currentSortingAlsorithm} onChange={evt=>setCurrentSortingAlsorithm(evt.target.value as TSorterNames)}>\r\n          <option value=\"quick-sort\">Quick Sort</option>\r\n          <option value=\"bubble-sort\">Bubble Sort</option>\r\n          <option value=\"heap-sort\">Heap Sort</option>\r\n          <option value=\"merge-sort\">Merge Sort</option>\r\n          <option value=\"selection-sort\">Selection Sort</option>\r\n          <option value=\"insertion-sort\">Insertion Sort</option>\r\n        </select>\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n(SortVizualizer as React.FC).defaultProps = {\r\n  nBars: 15\r\n}\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\table.tsx",["112","113"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { TSortKey } from '.';\r\nimport { useEffectWhenInView } from '../../custom-hooks/useEffectWhenInView';\r\nimport { CSSLoaderDualRing } from '../CSSLoaders';\r\nimport { TSorter } from '../Sorters';\r\nimport takeBatchFromIterator from './iterators';\r\nimport './table.css';\r\n\r\n\r\ntype Props = {\r\n  onDragStart: (ev: React.DragEvent<HTMLElement>) => void,\r\n  keysToSortBy: TSortKey[],\r\n  sorter: TSorter\r\n}\r\n\r\n\r\nconst keyToID = (key: string) => (key as string).toLowerCase().replace(\" \",\"-\");\r\nconst extractKeysFromData = (data: any[]) => data && data[0] ? Object.keys(data[0]) : [];\r\n// const isOnProductionHost = () => /(localhost|127.0.0.1|127.0.0.0|0.0.0.0)/.exec(window.location.origin) === null;\r\n\r\n\r\n\r\n\r\nexport default function Table({onDragStart, keysToSortBy, sorter}: Props) {\r\n\r\n\r\n  const [srcData, setSrcData] = useState<any[]>([]);\r\n  useEffect(()=>{\r\n    fetch(\"/table-sorter/factbook.json\")\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      sorter(\r\n        res, 0, res.length - 1, \r\n        (keysToSortBy && keysToSortBy[0]) \r\n          ? keysToSortBy.map(item => ({key: item.key, inAscending: item.isDirectionUp})) \r\n          : [{key: \"Country Name\", inAscending: true}]\r\n      )\r\n      batchIterator.current = takeBatchFromIterator(batchSize, res);\r\n      setSrcData(res);\r\n    })\r\n  }, [1])\r\n\r\n\r\n\r\n\r\n  const [uiData, setUiData] = useState<any[]>([]);\r\n  const [hasNoMoreData, setHasNoMoreData] = useState(false);\r\n  const batchSize = 20;\r\n  const batchIterator = useRef(takeBatchFromIterator(batchSize, srcData));\r\n  const loadMore = ()=>{\r\n    const nextBatch = batchIterator.current.next();\r\n    setHasNoMoreData(batchIterator.current.isDone());\r\n    (nextBatch.length !== 0) && setUiData(data => [...data, ...nextBatch]);\r\n  }\r\n  useEffectWhenInView(\"tfoot td span\", ()=>loadMore());\r\n\r\n\r\n\r\n\r\n  const keysFromData = useMemo(()=>extractKeysFromData(srcData), [srcData])\r\n  const keysFromProps = useMemo(()=>keysToSortBy.map(item => item.key), [keysToSortBy])\r\n  const tableRef = useRef<HTMLElement | null>(null);\r\n  useEffect(()=>{\r\n    const srcCopy = srcData.map(item => ({...item}))\r\n    sorter(\r\n      srcCopy, 0, srcCopy.length - 1, \r\n      (keysToSortBy && keysToSortBy[0]) \r\n        ? keysToSortBy.map(item => ({key: item.key, inAscending: item.isDirectionUp})) \r\n        : [{key: \"Country Name\", inAscending: true}]\r\n    )\r\n    batchIterator.current = takeBatchFromIterator(batchSize, srcCopy);\r\n    setUiData([]);\r\n    tableRef.current && (tableRef.current.scrollTop = 0);\r\n  }, [keysToSortBy, sorter, srcData])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n    <section className=\"sortable-table__container\" ref={tableRef}>\r\n      <input type=\"checkbox\" id=\"sortable-table__first-column-control\" className=\"hidden\"/>\r\n      <table className=\"sortable-table\" >\r\n        <thead>\r\n          <tr>\r\n            {\r\n              keysFromData.map((key, idx) => {\r\n                const id = keyToID(key);\r\n                const isKeyToSortBy = keysFromProps.includes(key);\r\n                if(idx === 0) { return (\r\n                  <th key={idx} id={id} draggable={!isKeyToSortBy} className={`sortable-table__header__item ${isKeyToSortBy ? \"disabled\": \"\"}`} onDragStart={onDragStart}>\r\n                    <label htmlFor=\"sortable-table__first-column-control\" className=\"flex items-center justify-end\">\r\n                      <span>{key}</span>\r\n                      <i className=\"fas fa-angle-double-left ml-2\"></i>\r\n                      <i className=\"fas fa-angle-double-right\"></i>\r\n                    </label>\r\n                  </th>\r\n                )} else {\r\n                  return (   \r\n                  <th key={idx} id={id} draggable={!isKeyToSortBy} className={`sortable-table__header__item ${isKeyToSortBy ? \"disabled\": \"\"}`} onDragStart={onDragStart}>\r\n                    <span>{key}</span>\r\n                  </th>\r\n                )}\r\n              })\r\n            }\r\n          </tr>\r\n\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            uiData.map((entry, idx) => {\r\n              return (\r\n                <tr key={idx + 1}>\r\n                  {\r\n                    keysFromData.map((key, idx_) => {\r\n                      const quartileMark = entry.quartileMark ? entry.quartileMark[key] : \"\";\r\n                      return (\r\n                        <td key={idx_} className={`${keyToID(key)} ${quartileMark} ${keysFromProps.includes(key) ? \"isSorted\" : \"\"}`}>\r\n                          <span>{ (entry as any)[key]  || \"\" }</span>\r\n                        </td>\r\n                      )}\r\n                    )\r\n                  }\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <td></td>\r\n            <td colSpan={keysFromData.length}>\r\n              {\r\n                hasNoMoreData\r\n                  ? <span></span> \r\n                  : <span><CSSLoaderDualRing/> Loading More Data...</span>\r\n              }\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </section>\r\n\r\n  )\r\n\r\n}","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\iterators.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useEffectWhenInView.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CSSLoaders\\index.tsx",[],["114","115"],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quartileSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useAppURI.ts",["116","117"],"import { useMemo } from \"react\";\r\n\r\nexport const useAppURI = (baseAppURI: string = \"/\") =>{\r\n  const uri = useMemo(()=>{\r\n    const baseCurrURI = window.location.pathname.split(\"/\")[1]\r\n    const uri = (!baseCurrURI || (baseCurrURI === \"\")) ? `/${baseAppURI}` : `/${baseCurrURI}`; \r\n    return uri.replaceAll(\"//\", \"/\");\r\n  }, [1]);\r\n  return uri;\r\n}\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\scrollHelpers.ts",["118","119"],"// https://javascriptio.com/view/4915713/react-navigation-that-will-smooth-scroll-to-section-of-the-page\r\n// https://codesandbox.io/s/falling-https-jwrj3?file=/src/App.tsx:636-686\r\n// https://stackoverflow.com/a/16171238/9034699\r\n\r\nimport { useEffect, useMemo } from \"react\";\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * \r\n * \r\n * @param  {string} targetID\r\n * @param  {any} clickEvent?\r\n * @param  {string} targetURI?\r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollIDIntoViewHelper = (targetID: string, clickEvent?: any, targetURI?: string, smooth: boolean = false)=>{\r\n  \r\n  // We are essentially hijacking the click event which does not really work with react router\r\n  clickEvent && clickEvent.preventDefault && clickEvent.preventDefault();\r\n\r\n  // Scroll element with provided id into view\r\n  const targetElmt = document.getElementById(targetID);\r\n  targetElmt && targetElmt.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n\r\n  // Update the url\r\n  targetURI && window.history.pushState(targetID, targetID, `/${targetURI ? targetURI : targetID}`);\r\n}\r\n\r\n// useEffect(scrollURLIDIntoViewHelper) use with interval?\r\n/**\r\n * When using multiple components on the same with different react router 'routes',\r\n * this hook will use (smooth) transition to get to bring the component with 'targetID' to\r\n * the top left of the page.\r\n * This hook assumes that the route is actually the id of the component to scroll to\r\n * \r\n * @param  {boolean=false} smooth\r\n */\r\nexport const scrollURLIDIntoViewHelper = (smooth: boolean = false)=>{\r\n  \r\n  // This function assumes that the last uri corresponds to the id of the element\r\n  // that must be scrolled into view\r\n  const url = window.location.href.split(\"/\");\r\n  const target = url[url.length - 1];//.toLowerCase();\r\n  const element = document.getElementById(target);\r\n\r\n  // Adjust view to display component with id from uri\r\n  element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n}\r\n\r\n/**\r\n * This function will ensure that the application is redirected to \r\n * the \"uri\" input argument on load/page refresh.\r\n * \r\n * @param  {string=\"Home\"} uri\r\n */\r\nexport const useResetURIOnLoad = (uri: string = \"Home\") => {\r\n  const handleResetURI = () => window.history.pushState(uri, uri, `/${uri}`);\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Attempts to extract the base URI of the application.\r\n * When used with react router, this is done before react router\r\n * start meddling with the urls.\r\n * \r\n * This function is probably not in its final form. But this will do while\r\n * I find something better instead.\r\n * \r\n * @param  {string=\"/\"} baseAppURI: Optional input if the logic to extract the uri fails.\r\n */\r\nexport const useAppURI = (baseAppURI: string = \"/\") =>{\r\n  const uri = useMemo(()=>{\r\n    const baseCurrURI = window.location.pathname.split(\"/\")[1]\r\n    const uri = (!baseCurrURI || (baseCurrURI === \"\")) ? `/${baseAppURI}` : `/${baseCurrURI}`; \r\n    return uri.replaceAll(\"//\", \"/\");\r\n  }, [1]);\r\n  return uri;\r\n}\r\n/**\r\n * When using react router with github pages and an application that lives at '<host>/baseUri/' , \r\n * refeshing the page causes github to send back a 404 Page.\r\n * This function will make sure to redirect the application the '<host>/baseUri/' after refreshing.\r\n * \r\n * onCondition is provided to avoid performing the redirection when 'condition()' evaluates to false.\r\n * This function is used until I find a better solution.\r\n * \r\n * @param  {string=\"Home\"} baseAppURI\r\n * @param  {()=>boolean} onCondition?\r\n */\r\nexport const useResetToBaseURIOnLoad = (baseAppURI?: string, onCondition?: ()=>boolean) => {\r\n  const uri = useAppURI(baseAppURI || \"/\");\r\n  \r\n  const handleResetURI = () => {\r\n    const condition = onCondition ? onCondition() : true;\r\n    condition && window.history.pushState(uri, uri, `${uri}`)\r\n  };\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"load\", handleResetURI);\r\n\r\n    return () => {\r\n      // Clean up the listener\r\n      window.removeEventListener(\"load\", handleResetURI);\r\n    };\r\n  });\r\n}\r\n// export const useSyncURIAndDisplay = ()=>{\r\n  \r\n//   // This function assumes that the last uri corresponds to the id of the element\r\n//   // that must be scrolled into view\r\n//   let url = window.location.href.split(\"/\");\r\n//   let target = url[url.length - 1].toLowerCase();\r\n//   let element = document.getElementById(target);\r\n\r\n//   // Adjust view to display component with id from uri\r\n//   element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n// }","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\generalHelpers.ts",["120"],"import { assert } from \"console\";\r\n\r\nexport const isOnProductionHost = () => /(localhost|127.0.0.1|127.0.0.0|0.0.0.0)/.exec(window.location.origin) === null;\r\n\r\n\r\nexport const addThousandSeparator = (inp: string, separator: string = \" \", pos?: number): string => { \r\n  \r\n  // Ensure we only deal with integers as strings\r\n  if(`${parseInt(inp.replaceAll(\" \",\"\"))}` !== inp) return inp;\r\n\r\n  // When pos is not defined, the recursion is about to start\r\n  // set position to the far right of the string\r\n  pos = pos || inp.length; \r\n  if(pos - 3 <= 0) return inp;\r\n  \r\n  // Add the separator, and recurse\r\n  inp = `${inp.substr(0, pos - 3)}${separator}${inp.substr(pos - 3)}`;\r\n  return addThousandSeparator(inp, separator, pos - 3);\r\n}\r\n\r\n",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":96,"column":6,"nodeType":"127","endLine":96,"endColumn":44,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"129","line":41,"column":6,"nodeType":"127","endLine":41,"endColumn":9,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"131","line":41,"column":7,"nodeType":"132","endLine":41,"endColumn":8},{"ruleId":"121","replacedBy":"133"},{"ruleId":"123","replacedBy":"134"},{"ruleId":"125","severity":1,"message":"135","line":8,"column":6,"nodeType":"127","endLine":8,"endColumn":9,"suggestions":"136"},{"ruleId":"125","severity":1,"message":"131","line":8,"column":7,"nodeType":"132","endLine":8,"endColumn":8},{"ruleId":"125","severity":1,"message":"135","line":86,"column":6,"nodeType":"127","endLine":86,"endColumn":9,"suggestions":"137"},{"ruleId":"125","severity":1,"message":"131","line":86,"column":7,"nodeType":"132","endLine":86,"endColumn":8},{"ruleId":"138","severity":1,"message":"139","line":1,"column":10,"nodeType":"140","messageId":"141","endLine":1,"endColumn":16},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentSortingAlsorithm'. Either include it or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has missing dependencies: 'keysToSortBy' and 'sorter'. Either include them or remove the dependency array. If 'sorter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["145"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal",["142"],["143"],"React Hook useMemo has a missing dependency: 'baseAppURI'. Either include it or remove the dependency array.",["146"],["147"],"@typescript-eslint/no-unused-vars","'assert' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"152","fix":"154"},"Update the dependencies array to be: [counter, currentSortingAlsorithm]",{"range":"155","text":"156"},"Update the dependencies array to be: [keysToSortBy, sorter]",{"range":"157","text":"158"},"Update the dependencies array to be: [baseAppURI]",{"range":"159","text":"160"},{"range":"161","text":"160"},[3444,3482],"[counter, currentSortingAlsorithm]",[1380,1383],"[keysToSortBy, sorter]",[327,330],"[baseAppURI]",[3401,3404]]