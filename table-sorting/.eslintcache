[{"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx":"1","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts":"2","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx":"3","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx":"4","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts":"5","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts":"6","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx":"7","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx":"8","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts":"9","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts":"10","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts":"11","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts":"12","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts":"13","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts":"14","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts":"15","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx":"16","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx":"17","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\table.tsx":"18","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\iterators.ts":"19","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useEffectWhenInView.ts":"20","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CSSLoaders\\index.tsx":"21"},{"size":500,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":1168,"mtime":1609268754646,"results":"25","hashOfConfig":"23"},{"size":1979,"mtime":1609335600731,"results":"26","hashOfConfig":"23"},{"size":1253,"mtime":1609065435396,"results":"27","hashOfConfig":"23"},{"size":207,"mtime":1609097595572,"results":"28","hashOfConfig":"23"},{"size":5226,"mtime":1609334924234,"results":"29","hashOfConfig":"23"},{"size":6159,"mtime":1609441861896,"results":"30","hashOfConfig":"23"},{"size":3061,"mtime":1609439189567,"results":"31","hashOfConfig":"23"},{"size":1240,"mtime":1609437513712,"results":"32","hashOfConfig":"23"},{"size":1037,"mtime":1609437635083,"results":"33","hashOfConfig":"23"},{"size":640,"mtime":1609437640957,"results":"34","hashOfConfig":"23"},{"size":2244,"mtime":1609437609057,"results":"35","hashOfConfig":"23"},{"size":649,"mtime":1609437527731,"results":"36","hashOfConfig":"23"},{"size":528,"mtime":1609437506948,"results":"37","hashOfConfig":"23"},{"size":1054,"mtime":1609234484098,"results":"38","hashOfConfig":"23"},{"size":2551,"mtime":1609268782419,"results":"39","hashOfConfig":"23"},{"size":5014,"mtime":1609442659629,"results":"40","hashOfConfig":"23"},{"size":1153,"mtime":1609441822895,"results":"41","hashOfConfig":"23"},{"size":865,"mtime":1609441117095,"results":"42","hashOfConfig":"23"},{"size":412,"mtime":1609440615350,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"m7l9da",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx",[],["88","89"],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx",["90"],"import React, { CSSProperties, useEffect, useRef, useState } from \"react\";\r\n\r\nimport getSorter, { swap, TSorterNames } from \"../Sorters\";\r\nimport \"./index.css\"\r\n\r\ntype BarProxy = {\r\n  value: number; \r\n  handleNo: number; \r\n  class: string;\r\n}\r\n// type BarProps = {\r\n//   height: number,\r\n//   id: number,\r\n//   position: number\r\n// }\r\ntype Props = {\r\n  nBars?: number\r\n}\r\n\r\nexport default function SortVizualizer({nBars}: Props) {\r\n\r\n  const [currentSortingAlsorithm, _setCurrentSortingAlsorithm] = useState<TSorterNames>(\"merge-sort\");\r\n  const setCurrentSortingAlsorithm = (algName: TSorterNames)=>{\r\n    // On new alg, execute side effect to reset vizualizer\r\n    barEffects.current = [];\r\n    _setCurrentSortingAlsorithm(algName);\r\n  }\r\n\r\n\r\n\r\n  const getRandomHeight = () => 5 + Math.round(Math.random() * 20) * 5;\r\n  // The height and position of the bars being vizualized are contained in bars\r\n  const bars = useRef<BarProxy[]>(Array(nBars).fill(0).map((_, idx)=> ({value: getRandomHeight(), handleNo: idx, class: \"\"})))\r\n\r\n\r\n\r\n\r\n  // Vizualizer Effects\r\n  // Structure that will record all swap movement that happened during the sorting\r\n  // These movement will become the effects seen on the ui\r\n  const barEffects = useRef<{f: Function, timeout: number}[]>([])\r\n  const [counter, setCounter] = useState<number>(0); // Dummy variable used to force rerenders\r\n  const renderBarEffect = ()=>setCounter(c => c + 1);\r\n  useEffect(()=>{\r\n    \r\n    // Effects are empty, we need to start a new sorting cycle\r\n    if(barEffects.current.length === 0) {\r\n      new Promise((resolve) => setTimeout(resolve, 1500)).then(()=>{\r\n\r\n        // Adjust heights for new sorting cycle\r\n        bars.current.forEach(bar=> bar.value = getRandomHeight());\r\n\r\n        // Pause just afer adjusting\r\n        barEffects.current.push({f: ()=>{}, timeout: 1500});\r\n\r\n        // Presort array and record swap movements that need to happen in order to get eventually to a sorted set bars\r\n        getSorter(currentSortingAlsorithm)(\r\n          bars.current.map(curr=>curr.value), \r\n          0, \r\n          bars.current.length - 1, \r\n          [{key: \"value\", inAscending: true}],\r\n          (initial, final, level1, level2, isSwapEffect)=>barEffects.current.push({\r\n            f: ()=>{ \r\n              if(isSwapEffect) swap(bars.current, initial, final); \r\n              if(!isSwapEffect) { bars.current[initial].value = final; } \r\n              // console.log(level1)\r\n              bars.current.forEach(bar => bar.class = \"\");\r\n              level1?.forEach(idx => bars.current[idx].class = \"emphasis-1\");\r\n              level2?.forEach(idx => bars.current[idx].class = \"emphasis-2\");\r\n            }, \r\n            timeout: barEffects.current.length === 0 ? 1500 : 300\r\n          })\r\n        );\r\n\r\n        // Schedule the recorded effects to be run one by one\r\n        renderBarEffect();\r\n      })\r\n\r\n\r\n    }else{\r\n\r\n      // Extract first of our bar effects\r\n      const [first, ...rest] = barEffects.current;\r\n      \r\n      // If it's not undefined, wait for timeout, then run the effect and force and re-render\r\n      first && new Promise((resolve) => setTimeout(resolve, first.timeout)).then(()=>{\r\n        first.f();\r\n        // Decrease the amount of effects that are still to be run for this sorting cycle\r\n        barEffects.current = rest;\r\n        renderBarEffect();\r\n      })\r\n\r\n    }\r\n\r\n    // This effect is run everytime counter is changed\r\n  }, [counter/*, currentSortingAlsorithm*/])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id=\"sort-vizualizer\" style={{\"--count\": bars.current.length * 2} as CSSProperties}>\r\n      {\r\n          bars\r\n          .current\r\n          // Adjust Height and position of bar\r\n          .map((_, idx) => {\r\n            const position = bars.current.findIndex(bar => bar.handleNo === idx); \r\n            const height = bars.current[position].value;\r\n            const className = bars.current[position].class;\r\n            return <div key={idx} style={{height: height + \"%\", left: `calc(${position} * 2 * var(--width))`}} className={className} id={`sort-vizualizer-bar-${idx}`} />\r\n          })\r\n          // Insert a dummy div between each bar, to space them\r\n          .reduce(\r\n            (acc, curr, idx) => [...acc, curr, <div key={bars.current.length + idx}/>], \r\n            [<div/>]\r\n          )\r\n          // Remove the initial value of acc\r\n          .slice(1)\r\n      }\r\n\r\n\r\n\r\n      <div className=\"sort-vizualizer__settings\">\r\n        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\r\n        <select id=\"sort-vizualizer__algorithm\" name=\"sort-vizualizer__algorithm\" value={currentSortingAlsorithm} onChange={evt=>setCurrentSortingAlsorithm(evt.target.value as TSorterNames)}>\r\n          <option value=\"quick-sort\">Quick Sort</option>\r\n          <option value=\"bubble-sort\">Bubble Sort</option>\r\n          <option value=\"heap-sort\">Heap Sort</option>\r\n          <option value=\"merge-sort\">Merge Sort</option>\r\n          <option value=\"selection-sort\">Selection Sort</option>\r\n          <option value=\"insertion-sort\">Insertion Sort</option>\r\n        </select>\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n(SortVizualizer as React.FC).defaultProps = {\r\n  nBars: 15\r\n}\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\table.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\iterators.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useEffectWhenInView.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CSSLoaders\\index.tsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":96,"column":6,"nodeType":"97","endLine":96,"endColumn":44,"suggestions":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentSortingAlsorithm'. Either include it or remove the dependency array.","ArrayExpression",["101"],"no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},"Update the dependencies array to be: [counter, currentSortingAlsorithm]",{"range":"104","text":"105"},[3444,3482],"[counter, currentSortingAlsorithm]"]