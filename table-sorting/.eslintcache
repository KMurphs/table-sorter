[{"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx":"1","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts":"2","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx":"3","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx":"4","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts":"5","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts":"6","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx":"7","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx":"8","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts":"9","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts":"10","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts":"11","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts":"12","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts":"13","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts":"14","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts":"15","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx":"16","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":1179,"mtime":1609185498851,"results":"21","hashOfConfig":"19"},{"size":1707,"mtime":1609142096040,"results":"22","hashOfConfig":"19"},{"size":1253,"mtime":1609065435396,"results":"23","hashOfConfig":"19"},{"size":207,"mtime":1609097595572,"results":"24","hashOfConfig":"19"},{"size":5134,"mtime":1609185904205,"results":"25","hashOfConfig":"19"},{"size":2614,"mtime":1609236020994,"results":"26","hashOfConfig":"19"},{"size":1542,"mtime":1609185423674,"results":"27","hashOfConfig":"19"},{"size":1101,"mtime":1609185387110,"results":"28","hashOfConfig":"19"},{"size":849,"mtime":1609185387111,"results":"29","hashOfConfig":"19"},{"size":572,"mtime":1609185387111,"results":"30","hashOfConfig":"19"},{"size":2741,"mtime":1609185387111,"results":"31","hashOfConfig":"19"},{"size":588,"mtime":1609185387111,"results":"32","hashOfConfig":"19"},{"size":463,"mtime":1609185387111,"results":"33","hashOfConfig":"19"},{"size":1054,"mtime":1609234484098,"results":"34","hashOfConfig":"19"},{"size":2356,"mtime":1609235967765,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"m7l9da",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx",[],["77","78"],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx",["79","80"],"import React, { useState } from 'react';\nimport './App.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n\n} from \"react-router-dom\";\nimport TableSorter from './components/TableSorter';\nimport Welcome from './components/Welcome';\nimport { useCustomCss_vh } from './custom-hooks/useCustomCss_vh';\n\n\n\nfunction App() {\n\n  const [isAtWelcomeScreen, setIsAtWelcomeScreen] = useState<boolean>(true);\n  \n  useCustomCss_vh();\n\n  \n  return (\n    <Router>\n      <Switch>\n\n\n        {/* https://stackoverflow.com/questions/42123261/programmatically-navigate-using-react-router-v4 */}\n        {/* https://www.codegrepper.com/code-examples/javascript/Programmatically+navigate+using+react+router */}\n        <Route path=\"/welcome\" render={({history})=>(\n          <Welcome onStartExploring={()=>history.push(\"/sorter\")} />\n        )}/>\n\n          \n\n        <Route path=\"/sorter\">\n          <TableSorter />\n        </Route>\n\n\n\n        {/* Redirects */}\n        <Route path=\"/\">\n          <Redirect to=\"/welcome\" />\n        </Route>\n        <Route path=\"*\">\n          <Redirect to=\"/sorter\" />\n        </Route>\n\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx",["81","82"],"import React, { CSSProperties, useEffect, useRef, useState } from \"react\";\r\n\r\nimport getSorter, { swap, TSorterNames } from \"../Sorters\";\r\nimport \"./index.css\"\r\n\r\ntype BarProxy = {\r\n  value: number; \r\n  handleNo: number; \r\n  class: string;\r\n}\r\ntype BarProps = {\r\n  height: number,\r\n  id: number,\r\n  position: number\r\n}\r\ntype Props = {\r\n  nBars?: number\r\n}\r\n\r\nexport default function SortVizualizer({nBars}: Props) {\r\n\r\n  const [currentSortingAlsorithm, _setCurrentSortingAlsorithm] = useState<TSorterNames>(\"merge-sort\");\r\n  const setCurrentSortingAlsorithm = (algName: TSorterNames)=>{\r\n    // On new alg, execute side effect to reset vizualizer\r\n    barEffects.current = [];\r\n    _setCurrentSortingAlsorithm(algName);\r\n  }\r\n\r\n\r\n\r\n  const getRandomHeight = () => 5 + Math.round(Math.random() * 20) * 5;\r\n  // The height and position of the bars being vizualized are contained in bars\r\n  const bars = useRef<BarProxy[]>(Array(nBars).fill(0).map((_, idx)=> ({value: getRandomHeight(), handleNo: idx, class: \"\"})))\r\n\r\n\r\n\r\n\r\n  // Vizualizer Effects\r\n  // Structure that will record all swap movement that happened during the sorting\r\n  // These movement will become the effects seen on the ui\r\n  const barEffects = useRef<{f: Function, timeout: number}[]>([])\r\n  const [counter, setCounter] = useState<number>(0); // Dummy variable used to force rerenders\r\n  const renderBarEffect = ()=>setCounter(c => c + 1);\r\n  useEffect(()=>{\r\n    \r\n    // Effects are empty, we need to start a new sorting cycle\r\n    if(barEffects.current.length === 0) {\r\n      new Promise((resolve) => setTimeout(resolve, 1500)).then(()=>{\r\n\r\n        // Adjust heights for new sorting cycle\r\n        bars.current.forEach(bar=> bar.value = getRandomHeight());\r\n\r\n        // Pause just afer adjusting\r\n        barEffects.current.push({f: ()=>{}, timeout: 1500});\r\n\r\n        // Presort array and record swap movements that need to happen in order to get eventually to a sorted set bars\r\n        getSorter(currentSortingAlsorithm)(\r\n          bars.current.map(curr=>curr.value), \r\n          0, \r\n          bars.current.length - 1, \r\n          (initial, final, level1, level2, isSwapEffect)=>barEffects.current.push({\r\n            f: ()=>{ \r\n              if(isSwapEffect) swap(bars.current, initial, final); \r\n              if(!isSwapEffect) { bars.current[initial].value = final; } \r\n              // console.log(level1)\r\n              bars.current.forEach(bar => bar.class = \"\");\r\n              level1?.forEach(idx => bars.current[idx].class = \"emphasis-1\");\r\n              level2?.forEach(idx => bars.current[idx].class = \"emphasis-2\");\r\n            }, \r\n            timeout: barEffects.current.length === 0 ? 1500 : 300\r\n          })\r\n        );\r\n\r\n        // Schedule the recorded effects to be run one by one\r\n        renderBarEffect();\r\n      })\r\n\r\n\r\n    }else{\r\n\r\n      // Extract first of our bar effects\r\n      const [first, ...rest] = barEffects.current;\r\n      \r\n      // If it's not undefined, wait for timeout, then run the effect and force and re-render\r\n      first && new Promise((resolve) => setTimeout(resolve, first.timeout)).then(()=>{\r\n        first.f();\r\n        // Decrease the amount of effects that are still to be run for this sorting cycle\r\n        barEffects.current = rest;\r\n        renderBarEffect();\r\n      })\r\n\r\n    }\r\n\r\n    // This effect is run everytime counter is changed\r\n  }, [counter])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id=\"sort-vizualizer\" style={{\"--count\": bars.current.length * 2} as CSSProperties}>\r\n      {\r\n          bars\r\n          .current\r\n          // Adjust Height and position of bar\r\n          .map((_, idx) => {\r\n            const position = bars.current.findIndex(bar => bar.handleNo === idx); \r\n            const height = bars.current[position].value;\r\n            const className = bars.current[position].class;\r\n            return <div key={idx} style={{height: height + \"%\", left: `calc(${position} * 2 * var(--width))`}} className={className} id={`sort-vizualizer-bar-${idx}`} />\r\n          })\r\n          // Insert a dummy div between each bar, to space them\r\n          .reduce(\r\n            (acc, curr, idx) => [...acc, curr, <div key={bars.current.length + idx}/>], \r\n            [<div/>]\r\n          )\r\n          // Remove the initial value of acc\r\n          .slice(1)\r\n      }\r\n\r\n\r\n\r\n      <div className=\"sort-vizualizer__settings\">\r\n        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\r\n        <select id=\"sort-vizualizer__algorithm\" name=\"sort-vizualizer__algorithm\" value={currentSortingAlsorithm} onChange={evt=>setCurrentSortingAlsorithm(evt.target.value as TSorterNames)}>\r\n          <option value=\"quick-sort\">Quick Sort</option>\r\n          <option value=\"bubble-sort\">Bubble Sort</option>\r\n          <option value=\"heap-sort\">Heap Sort</option>\r\n          <option value=\"merge-sort\">Merge Sort</option>\r\n          <option value=\"selection-sort\">Selection Sort</option>\r\n          <option value=\"insertion-sort\">Insertion Sort</option>\r\n        </select>\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n(SortVizualizer as React.FC).defaultProps = {\r\n  nBars: 15\r\n}\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts",["83"],"import { swap, getValue, T, TSorter } from \".\";\r\n\r\n\r\n\r\n\r\nconst sort: TSorter = (arr, start, end, onMoveCb)=>{\r\n\r\n\r\n  for(let position = 0; position < arr.length - 1; position++){\r\n    let minVal = position;\r\n    for(let mover = position + 1; mover <= arr.length - 1; mover++){\r\n      if(getValue(arr[minVal]) > getValue(arr[mover])){\r\n        minVal = mover;\r\n      }\r\n    }\r\n    if(minVal !== position){\r\n      swap(arr, position, minVal);\r\n      onMoveCb && onMoveCb(position, minVal, [position, minVal], [], true);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default sort;\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts",["84","85","86"],"import { start } from \"repl\";\r\nimport { swap, getValue, T, TSorter, TSortEffectCallback } from \".\";\r\n\r\n\r\n\r\n\r\nconst sort: TSorter = (arr, start, end, onMoveCb)=>{\r\n\r\n  const low = start || 0;\r\n  const high = end === undefined || end === null ? arr.length - 1 : end;\r\n  if((low === 0) && (end === arr.length - 1))console.log(arr)\r\n\r\n  if(low >= high) return;\r\n  const middle = Math.round((low + high) / 2);\r\n\r\n  sort(arr, low, middle - 1, onMoveCb);\r\n  sort(arr, middle, high, onMoveCb);\r\n  merge(arr, low, middle, high, onMoveCb);\r\n\r\n  if((low === 0) && (end === arr.length - 1))console.log(arr)\r\n\r\n}\r\n\r\n\r\nconst movement = (arr: T[] | number[], partialArr: T[] | number[], partialArrRunnerOffset: number, mainRunner: number, partialArrRunner: number, onMoveCb?: TSortEffectCallback)=> { \r\n  arr[mainRunner] = partialArr[partialArrRunner]; \r\n  // onMoveCb && onMoveCb(mainRunner, partialArrRunnerOffset + partialArrRunner, [], [], true)\r\n  onMoveCb && onMoveCb(mainRunner, getValue(partialArr[partialArrRunner]), [], [], false)\r\n  return [mainRunner + 1, partialArrRunner + 1]; \r\n}\r\n\r\nconst merge = (arr: T[] | number[], low: number, middle: number, high: number, onMoveCb?: TSortEffectCallback)=>{\r\n\r\n  const lowArray = arr.slice(low, middle);\r\n  const highArray = arr.slice(middle, high + 1);\r\n\r\n  let lowRunner = 0;\r\n  let highRunner = 0;\r\n  let mainRunner = low;\r\n\r\n  \r\n\r\n  while((lowRunner !== lowArray.length) && (highRunner !== highArray.length)){\r\n    if(getValue(lowArray[lowRunner]) < getValue(highArray[highRunner])) {\r\n      arr[mainRunner] = lowArray[lowRunner]; \r\n      // onMoveCb && onMoveCb(mainRunner, partialArrRunnerOffset + partialArrRunner, [], [], true);\r\n      onMoveCb && onMoveCb(mainRunner, getValue(arr[mainRunner]), [low + lowRunner, middle + highRunner], [mainRunner], false);\r\n      lowRunner++;\r\n      mainRunner++;\r\n    }\r\n    else {\r\n      arr[mainRunner] = highArray[highRunner]; \r\n      // onMoveCb && onMoveCb(mainRunner, partialArrRunnerOffset + partialArrRunner, [], [], true);\r\n      onMoveCb && onMoveCb(mainRunner, getValue(arr[mainRunner]), [low + lowRunner, middle + highRunner], [mainRunner], false);\r\n      highRunner++;\r\n      mainRunner++;\r\n    }\r\n  }\r\n\r\n  while(lowRunner !== lowArray.length){\r\n    arr[mainRunner] = lowArray[lowRunner]; \r\n    onMoveCb && onMoveCb(mainRunner, getValue(arr[mainRunner]), [low + lowRunner, high], [mainRunner], false);\r\n    lowRunner++;\r\n    mainRunner++;\r\n  }\r\n  while(highRunner !== highArray.length){\r\n    arr[mainRunner] = highArray[highRunner]; \r\n    onMoveCb && onMoveCb(mainRunner, getValue(arr[mainRunner]), [middle - 1, middle + highRunner], [mainRunner], false);\r\n    highRunner++;\r\n    mainRunner++;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default sort;\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts",["87"],"import { swap, getValue, T, TSorter } from \".\";\r\n\r\n\r\n\r\n\r\nconst sort: TSorter = (arr, start, end, onMoveCb)=>{\r\n\r\n\r\n  for(let position = 1; position < arr.length; position++){\r\n    \r\n    let currVal = arr[position];\r\n    let runner = position;\r\n    while((runner !== 0) && getValue(arr[runner - 1]) > getValue(currVal)) {\r\n      // arr[runner] = arr[runner - 1];\r\n      swap(arr, runner, runner - 1);\r\n      onMoveCb && onMoveCb(runner, runner - 1, [position, runner - 1], [], true);\r\n      runner--;\r\n    }\r\n    arr[runner] = currVal;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default sort;\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts",["88"],"import { swap, getValue, T, TSorter } from \".\";\r\n\r\n\r\n\r\n\r\nconst sort: TSorter = (arr, start, end, onMoveCb)=>{\r\n\r\n\r\n  for(let position = arr.length - 1; position > 0; position--){\r\n    for(let mover = 0; mover < position; mover++){\r\n      if(getValue(arr[mover]) > getValue(arr[mover + 1])){\r\n        swap(arr, mover, mover + 1);\r\n        onMoveCb && onMoveCb(mover, mover + 1, [position], [], true);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default sort;\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx",["89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":20,"column":10,"nodeType":"96","messageId":"97","endLine":20,"endColumn":27},{"ruleId":"94","severity":1,"message":"98","line":20,"column":29,"nodeType":"96","messageId":"97","endLine":20,"endColumn":49},{"ruleId":"94","severity":1,"message":"99","line":11,"column":6,"nodeType":"96","messageId":"97","endLine":11,"endColumn":14},{"ruleId":"100","severity":1,"message":"101","line":95,"column":6,"nodeType":"102","endLine":95,"endColumn":15,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"104","line":1,"column":26,"nodeType":"96","messageId":"97","endLine":1,"endColumn":27},{"ruleId":"94","severity":1,"message":"105","line":1,"column":10,"nodeType":"96","messageId":"97","endLine":1,"endColumn":15},{"ruleId":"94","severity":1,"message":"106","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"107","line":25,"column":7,"nodeType":"96","messageId":"97","endLine":25,"endColumn":15},{"ruleId":"94","severity":1,"message":"104","line":1,"column":26,"nodeType":"96","messageId":"97","endLine":1,"endColumn":27},{"ruleId":"94","severity":1,"message":"104","line":1,"column":26,"nodeType":"96","messageId":"97","endLine":1,"endColumn":27},{"ruleId":"94","severity":1,"message":"108","line":66,"column":10,"nodeType":"96","messageId":"97","endLine":66,"endColumn":24},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'isAtWelcomeScreen' is assigned a value but never used.","Identifier","unusedVar","'setIsAtWelcomeScreen' is assigned a value but never used.","'BarProps' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentSortingAlsorithm'. Either include it or remove the dependency array.","ArrayExpression",["111"],"'T' is defined but never used.","'start' is defined but never used.","'swap' is defined but never used.","'movement' is assigned a value but never used.","'CheckboxSource' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [counter, currentSortingAlsorithm]",{"range":"114","text":"115"},[3381,3390],"[counter, currentSortingAlsorithm]"]