[{"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx":"1","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts":"2","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx":"3","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx":"4","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts":"5","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts":"6","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx":"7","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx":"8","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts":"9","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts":"10","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts":"11","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts":"12","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts":"13","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts":"14","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts":"15","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx":"16","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx":"17","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\table.tsx":"18"},{"size":500,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":1168,"mtime":1609268754646,"results":"22","hashOfConfig":"20"},{"size":1979,"mtime":1609335600731,"results":"23","hashOfConfig":"20"},{"size":1253,"mtime":1609065435396,"results":"24","hashOfConfig":"20"},{"size":207,"mtime":1609097595572,"results":"25","hashOfConfig":"20"},{"size":5226,"mtime":1609334924234,"results":"26","hashOfConfig":"20"},{"size":6173,"mtime":1609333522777,"results":"27","hashOfConfig":"20"},{"size":3020,"mtime":1609332072981,"results":"28","hashOfConfig":"20"},{"size":1225,"mtime":1609330146080,"results":"29","hashOfConfig":"20"},{"size":1016,"mtime":1609332297607,"results":"30","hashOfConfig":"20"},{"size":625,"mtime":1609330271718,"results":"31","hashOfConfig":"20"},{"size":2351,"mtime":1609330512745,"results":"32","hashOfConfig":"20"},{"size":638,"mtime":1609330168492,"results":"33","hashOfConfig":"20"},{"size":515,"mtime":1609330099176,"results":"34","hashOfConfig":"20"},{"size":1054,"mtime":1609234484098,"results":"35","hashOfConfig":"20"},{"size":2551,"mtime":1609268782419,"results":"36","hashOfConfig":"20"},{"size":4086,"mtime":1609339461615,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"m7l9da",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\index.tsx",[],["78","79"],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\reportWebVitals.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\App.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Welcome\\index.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useCustomCss_vh.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\custom-hooks\\useForceRerender.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\SortVizualizer\\index.tsx",["80"],"import React, { CSSProperties, useEffect, useRef, useState } from \"react\";\r\n\r\nimport getSorter, { swap, TSorterNames } from \"../Sorters\";\r\nimport \"./index.css\"\r\n\r\ntype BarProxy = {\r\n  value: number; \r\n  handleNo: number; \r\n  class: string;\r\n}\r\n// type BarProps = {\r\n//   height: number,\r\n//   id: number,\r\n//   position: number\r\n// }\r\ntype Props = {\r\n  nBars?: number\r\n}\r\n\r\nexport default function SortVizualizer({nBars}: Props) {\r\n\r\n  const [currentSortingAlsorithm, _setCurrentSortingAlsorithm] = useState<TSorterNames>(\"merge-sort\");\r\n  const setCurrentSortingAlsorithm = (algName: TSorterNames)=>{\r\n    // On new alg, execute side effect to reset vizualizer\r\n    barEffects.current = [];\r\n    _setCurrentSortingAlsorithm(algName);\r\n  }\r\n\r\n\r\n\r\n  const getRandomHeight = () => 5 + Math.round(Math.random() * 20) * 5;\r\n  // The height and position of the bars being vizualized are contained in bars\r\n  const bars = useRef<BarProxy[]>(Array(nBars).fill(0).map((_, idx)=> ({value: getRandomHeight(), handleNo: idx, class: \"\"})))\r\n\r\n\r\n\r\n\r\n  // Vizualizer Effects\r\n  // Structure that will record all swap movement that happened during the sorting\r\n  // These movement will become the effects seen on the ui\r\n  const barEffects = useRef<{f: Function, timeout: number}[]>([])\r\n  const [counter, setCounter] = useState<number>(0); // Dummy variable used to force rerenders\r\n  const renderBarEffect = ()=>setCounter(c => c + 1);\r\n  useEffect(()=>{\r\n    \r\n    // Effects are empty, we need to start a new sorting cycle\r\n    if(barEffects.current.length === 0) {\r\n      new Promise((resolve) => setTimeout(resolve, 1500)).then(()=>{\r\n\r\n        // Adjust heights for new sorting cycle\r\n        bars.current.forEach(bar=> bar.value = getRandomHeight());\r\n\r\n        // Pause just afer adjusting\r\n        barEffects.current.push({f: ()=>{}, timeout: 1500});\r\n\r\n        // Presort array and record swap movements that need to happen in order to get eventually to a sorted set bars\r\n        getSorter(currentSortingAlsorithm)(\r\n          bars.current.map(curr=>curr.value), \r\n          0, \r\n          bars.current.length - 1, \r\n          [{key: \"value\", inAscending: true}],\r\n          (initial, final, level1, level2, isSwapEffect)=>barEffects.current.push({\r\n            f: ()=>{ \r\n              if(isSwapEffect) swap(bars.current, initial, final); \r\n              if(!isSwapEffect) { bars.current[initial].value = final; } \r\n              // console.log(level1)\r\n              bars.current.forEach(bar => bar.class = \"\");\r\n              level1?.forEach(idx => bars.current[idx].class = \"emphasis-1\");\r\n              level2?.forEach(idx => bars.current[idx].class = \"emphasis-2\");\r\n            }, \r\n            timeout: barEffects.current.length === 0 ? 1500 : 300\r\n          })\r\n        );\r\n\r\n        // Schedule the recorded effects to be run one by one\r\n        renderBarEffect();\r\n      })\r\n\r\n\r\n    }else{\r\n\r\n      // Extract first of our bar effects\r\n      const [first, ...rest] = barEffects.current;\r\n      \r\n      // If it's not undefined, wait for timeout, then run the effect and force and re-render\r\n      first && new Promise((resolve) => setTimeout(resolve, first.timeout)).then(()=>{\r\n        first.f();\r\n        // Decrease the amount of effects that are still to be run for this sorting cycle\r\n        barEffects.current = rest;\r\n        renderBarEffect();\r\n      })\r\n\r\n    }\r\n\r\n    // This effect is run everytime counter is changed\r\n  }, [counter/*, currentSortingAlsorithm*/])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id=\"sort-vizualizer\" style={{\"--count\": bars.current.length * 2} as CSSProperties}>\r\n      {\r\n          bars\r\n          .current\r\n          // Adjust Height and position of bar\r\n          .map((_, idx) => {\r\n            const position = bars.current.findIndex(bar => bar.handleNo === idx); \r\n            const height = bars.current[position].value;\r\n            const className = bars.current[position].class;\r\n            return <div key={idx} style={{height: height + \"%\", left: `calc(${position} * 2 * var(--width))`}} className={className} id={`sort-vizualizer-bar-${idx}`} />\r\n          })\r\n          // Insert a dummy div between each bar, to space them\r\n          .reduce(\r\n            (acc, curr, idx) => [...acc, curr, <div key={bars.current.length + idx}/>], \r\n            [<div/>]\r\n          )\r\n          // Remove the initial value of acc\r\n          .slice(1)\r\n      }\r\n\r\n\r\n\r\n      <div className=\"sort-vizualizer__settings\">\r\n        <i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\r\n        <select id=\"sort-vizualizer__algorithm\" name=\"sort-vizualizer__algorithm\" value={currentSortingAlsorithm} onChange={evt=>setCurrentSortingAlsorithm(evt.target.value as TSorterNames)}>\r\n          <option value=\"quick-sort\">Quick Sort</option>\r\n          <option value=\"bubble-sort\">Bubble Sort</option>\r\n          <option value=\"heap-sort\">Heap Sort</option>\r\n          <option value=\"merge-sort\">Merge Sort</option>\r\n          <option value=\"selection-sort\">Selection Sort</option>\r\n          <option value=\"insertion-sort\">Insertion Sort</option>\r\n        </select>\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n(SortVizualizer as React.FC).defaultProps = {\r\n  nBars: 15\r\n}\r\n\r\n","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\index.tsx",["81","82"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport Checkbox from '../CustomFormsControls/checkbox';\r\nimport getSorter, { TSorterNames } from '../Sorters';\r\nimport './index.css';\r\nimport Table from './table';\r\n\r\n\r\nexport type TSortKey = {id: string, key: string, isDirectionUp: boolean}\r\nexport default function TableSorter() {\r\n\r\n  const [checkbox, setCheckbox] = useState<boolean>(true);\r\n  const [sortAlg, setSortAlg] = useState<TSorterNames>(\"quick-sort\");\r\n\r\n\r\n\r\n\r\n  // https://codepen.io/lorelea/pen/WRqQyy?editors=0010\r\n  // http://bernardo-castilho.github.io/DragDropTouch/demo/\r\n  // https://www.codeproject.com/Articles/1091766/Add-support-for-standard-HTML-Drag-and-Drop-operat\r\n  const [sortKeys, _setSortKeys] = useState<TSortKey[]>([]);\r\n  const addToSortKeys = (newKey: TSortKey)=>{\r\n    _setSortKeys(keys => {\r\n      const existingKey = sortKeys.find(item => item.id === newKey.id)\r\n      return existingKey ? keys : [...keys, {...newKey}]\r\n    })\r\n  }\r\n  const removeFromSortKeys = (keyID: string) => _setSortKeys(keys => keys.filter(key => key.id !== keyID))\r\n  const changeSortKeyDirection = (keyID: string, isUp: boolean) => _setSortKeys(keys => keys.map(key => { (key.id === keyID) && (key.isDirectionUp = isUp); return key; }))\r\n  const resetSortKeys = ()=> _setSortKeys([])\r\n  const handleResetTable = ()=>resetSortKeys()\r\n\r\n  const handleDragStart = (ev: React.DragEvent<HTMLElement>) => {\r\n    const inputCheckbox = ev.currentTarget.querySelector(\"input[type=checkbox]\")\r\n    ev.dataTransfer.setData(\"text\", JSON.stringify({\r\n      id: ev.currentTarget.id,\r\n      key: ev.currentTarget.querySelector(\"span\")?.innerText,\r\n      isDirectionUp: inputCheckbox ? (inputCheckbox as HTMLInputElement).checked : true,\r\n    }));\r\n  }\r\n  const allowDrop = (ev: React.DragEvent<HTMLElement>)=>{\r\n\t\tev.preventDefault();\r\n\t\tev.stopPropagation();\r\n  }\r\n  const handleDrop = (ev: React.DragEvent<HTMLElement>)=>{\r\n    addToSortKeys(JSON.parse(ev.dataTransfer.getData(\"text\")) as TSortKey);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"table-sorter\">\r\n      <header className=\"table-sorter__header grid p-4 lg:flex lg:justify-between lg:flex-row lg:items-end\">\r\n\r\n        <section className=\"flex justify-between items-center lg:inline-block relative z-10\">\r\n          <h1 className=\"text-2xl lg:text-4xl\">Table Sorter</h1>\r\n          <label htmlFor=\"app-menu-control--hidden\" id=\"app-menu-control\" className=\"text-2xl flex lg:hidden rounded-full hover:bg-gray-100 w-10 h-10 justify-center items-center\">\r\n            <i className=\"fas fa-bars\"></i>\r\n          </label>\r\n        </section>\r\n\r\n\r\n        <input type=\"checkbox\" id=\"app-menu-control--hidden\" className=\"hidden\"/>\r\n        <section className=\"app-menu pt-4 lg:pt-0 flex text-lg flex-col lg:flex-row \">\r\n          <div className=\"flex items-center lg:mr-8 flex-col lg:flex-row\">\r\n            <button className=\" py-2 btn btn--link\" onClick={handleResetTable}>Reset</button>\r\n            <span className=\"p-4 py-2 hidden\"><Checkbox type={1} value={checkbox} onChange={setCheckbox} constantText={\"Direction: \"} onText={\"Reverse\"} offText={\"Normal\"} extraClasses={\"with-muted-p\"}/></span>\r\n          </div>\r\n          <ul className=\"sort-algorithms flex items-stretch flex-col lg:flex-row rounded overflow-hidden\">\r\n            <li><input className=\"hidden sort-algorithm\" type=\"radio\" name=\"sort-algorithm\" value=\"quick-sort\" id=\"quick-sort\" checked={sortAlg === \"quick-sort\"} onChange={e=>e.target.checked && setSortAlg(\"quick-sort\")} /><label className=\"p-4 py-2 text-center\" htmlFor=\"quick-sort\">Quick Sort</label></li>\r\n            <li><input className=\"hidden sort-algorithm\" type=\"radio\" name=\"sort-algorithm\" value=\"bubble-sort\" id=\"bubble-sort\" checked={sortAlg === \"bubble-sort\"} onChange={e=>e.target.checked && setSortAlg(\"bubble-sort\")} /><label className=\"p-4 py-2 text-center\" htmlFor=\"bubble-sort\">Bubble Sort</label></li>\r\n            <li><input className=\"hidden sort-algorithm\" type=\"radio\" name=\"sort-algorithm\" value=\"merge-sort\" id=\"merge-sort\" checked={sortAlg === \"merge-sort\"} onChange={e=>e.target.checked && setSortAlg(\"merge-sort\")} /><label className=\"p-4 py-2 text-center\" htmlFor=\"merge-sort\">Merge Sort</label></li>\r\n            <li><input className=\"hidden sort-algorithm\" type=\"radio\" name=\"sort-algorithm\" value=\"insertion-sort\" id=\"insertion-sort\" checked={sortAlg === \"insertion-sort\"} onChange={e=>e.target.checked && setSortAlg(\"insertion-sort\")}/><label className=\"p-4 py-2 text-center\" htmlFor=\"insertion-sort\">Insertion Sort</label></li>\r\n            <li><input className=\"hidden sort-algorithm\" type=\"radio\" name=\"sort-algorithm\" value=\"quartile-sort\" id=\"quartile-sort\" checked={sortAlg === \"quick-sort\"} onChange={e=>e.target.checked && setSortAlg(\"quick-sort\")} /><label className=\"p-4 py-2 text-center\" htmlFor=\"quartile-sort\">Quartile Sort</label></li>\r\n          </ul>\r\n        </section>\r\n      </header>\r\n\r\n      <main className=\"overflow-hidden flex flex-col\">\r\n        <section className=\"px-4 py-2 lg:py-6 text-md md:text-lg border-t border-b bg-gray-50\" onDragOver={allowDrop} onDrop={handleDrop}>\r\n          <span className=\"text-sm lg:text-md\">Drag headers here to sort: </span>\r\n          {\r\n            sortKeys.map((item, idx) => (\r\n              <span onClick={()=>{}} key={idx} id={`${item.id}--cloned`} className=\"sort-key\">\r\n                <label htmlFor={`${item.id}--cloned-checkbox`}>\r\n                  {item.key}\r\n                  <input type=\"checkbox\" id={`${item.id}--cloned-checkbox`} className=\"hidden\" checked={item.isDirectionUp} onChange={e=>{changeSortKeyDirection(item.id, e.target.checked)}}/>\r\n                  <i className=\"fas fa-caret-up\"></i>\r\n                  <i className=\"fas fa-caret-down\"></i>\r\n                </label>\r\n                <span className=\"remove\" onClick={()=>removeFromSortKeys(item.id)}>\r\n                  <i className=\"fas fa-times\"></i>\r\n                </span>\r\n              </span>\r\n            ))\r\n          }\r\n        </section>\r\n        <Table onDragStart={handleDragStart} keysToSortBy={sortKeys} sorter={getSorter(sortAlg)}/>\r\n      </main>\r\n    </div>\r\n    \r\n  )\r\n\r\n}","C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\index.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\heapSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\quickSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\selectionSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\mergeSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\insertionSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\Sorters\\bubbleSort.ts",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\Checkbox.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\CustomFormsControls\\checkbox.tsx",[],"C:\\PersonalProjects\\table-sorting\\table-sorting\\src\\components\\TableSorter\\table.tsx",["83"],"import React from 'react';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { TSortKey } from '.';\r\nimport { TSorter } from '../Sorters';\r\nimport './table.css';\r\n// import data from \"./assets/factbook.json\"\r\ntype Props = {\r\n  onDragStart: (ev: React.DragEvent<HTMLElement>) => void,\r\n  keysToSortBy: TSortKey[],\r\n  sorter: TSorter\r\n}\r\n\r\nexport default function Table({onDragStart, keysToSortBy, sorter}: Props) {\r\n\r\n  const [data, setData] = useState<any[]>([{}])\r\n  // const [data, setData] = useState<any[]>([\r\n  //   {key1: \"value11\",key2: \"value21\",key3: \"value34\"},\r\n  //   {key1: \"value12\",key2: \"value22\",key3: \"value33\"},\r\n  //   {key1: \"value13\",key2: \"value23\",key3: \"value32\"},\r\n  //   {key1: \"value14\",key2: \"value24\",key3: \"value31\"},\r\n  // ]);\r\n  const keyToID = (key: string) => (key as string).toLowerCase().replace(\" \",\"-\");\r\n  const extractKeysFromData = (data: any[]) => data && data[0] ? Object.keys(data[0]) : [];\r\n\r\n\r\n\r\n  const keysFromData = useRef<string[]>(extractKeysFromData(data))\r\n  const keysToSortByAsStrings = keysToSortBy.map(item => item.key)\r\n\r\n\r\n  const start = new Date().getTime()\r\n  // sorter(data, 0, data.length - 1, (keysToSortBy && keysToSortBy[0]) ? keysToSortBy.map(item => ({key: item.key, inAscending: item.isDirectionUp})) : [{key: keysFromData.current[0],inAscending:true}]);\r\n  React.useMemo(() => sorter(data, 0, data.length - 1, (keysToSortBy && keysToSortBy[0]) ? keysToSortBy.map(item => ({key: item.key, inAscending: item.isDirectionUp})) : [{key: keysFromData.current[0],inAscending:true}]), [keysToSortBy]);\r\n  // const sleeping = React.useMemo(() => sleep(sleepSeconds), [sleepSeconds]);\r\n  console.log(\"Sort Operation: \", (new Date().getTime() - start));\r\n\r\n\r\n  const isOnProductionHost = ()=> /(localhost|127.0.0.0|0.0.0.0)/.exec(window.location.origin) === null;\r\n\r\n  useEffect(()=>{\r\n    fetch((isOnProductionHost() ? \"table-sorter/\" : \"\") + \"factbook.json\")\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      keysFromData.current = extractKeysFromData(res);\r\n      setData(res);\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <section className=\"sortable-table__container\">\r\n      <input type=\"checkbox\" id=\"sortable-table__first-column-control\" className=\"hidden\"/>\r\n      <table className=\"sortable-table\">\r\n        <thead>\r\n          <tr>\r\n            {\r\n              keysFromData.current.map((key, idx) => {\r\n                const id = keyToID(key);\r\n                const isKeyToSortBy = keysToSortByAsStrings.includes(key);\r\n                if(idx === 0) { return (\r\n                  <th key={idx} id={id} draggable={!isKeyToSortBy} className={`sortable-table__header__item ${isKeyToSortBy ? \"disabled\": \"\"}`} onDragStart={onDragStart}>\r\n                    <label htmlFor=\"sortable-table__first-column-control\" className=\"flex items-center justify-end\">\r\n                      <span>{key}</span>\r\n                      <i className=\"fas fa-angle-double-left ml-2\"></i>\r\n                      <i className=\"fas fa-angle-double-right\"></i>\r\n                    </label>\r\n                  </th>\r\n                )} else {\r\n                  return (   \r\n                  <th key={idx} id={id} draggable={!isKeyToSortBy} className={`sortable-table__header__item ${isKeyToSortBy ? \"disabled\": \"\"}`} onDragStart={onDragStart}>\r\n                    <span>{key}</span>\r\n                  </th>\r\n                )}\r\n              })\r\n            }\r\n          </tr>\r\n\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            data && data.map((entry, idx) => {\r\n              return (\r\n                <tr key={idx + 1}>\r\n                  {\r\n                    keysFromData.current.map((key, idx_) => (\r\n                      <td key={idx_} className={`${keyToID(key)} ${keysToSortByAsStrings.includes(key) ? \"isSorted\" : \"\"}`}>\r\n                        <span>{ (entry as any)[key]  || \"\" }</span>\r\n                      </td>\r\n                    ))\r\n                  }\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </section>\r\n\r\n    \r\n  )\r\n\r\n}",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":96,"column":6,"nodeType":"90","endLine":96,"endColumn":44,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":26},{"ruleId":"92","severity":1,"message":"96","line":1,"column":28,"nodeType":"94","messageId":"95","endLine":1,"endColumn":34},{"ruleId":"88","severity":1,"message":"97","line":33,"column":223,"nodeType":"90","endLine":33,"endColumn":237,"suggestions":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentSortingAlsorithm'. Either include it or remove the dependency array.","ArrayExpression",["101"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","React Hook React.useMemo has missing dependencies: 'data' and 'sorter'. Either include them or remove the dependency array. If 'sorter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["102"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [counter, currentSortingAlsorithm]",{"range":"107","text":"108"},"Update the dependencies array to be: [data, keysToSortBy, sorter]",{"range":"109","text":"110"},[3444,3482],"[counter, currentSortingAlsorithm]",[1561,1575],"[data, keysToSortBy, sorter]"]